<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How I modified my plugin&#39;s readme.txt on the WordPress repo using SVN (Linux)</title>
      <link href="/just-my-notes/modifiy-plugin-readme-txt-on-wordpress-repo-using-svn/"/>
      <url>/just-my-notes/modifiy-plugin-readme-txt-on-wordpress-repo-using-svn/</url>
      
        <content type="html"><![CDATA[<p>I recently needed to update the <code>readme.txt</code> file inside a specific tag (<code>tags/4.1</code>) of my WordPress plugin hosted on WordPress.org.</p><hr><h2 id="🔧-Goal"><a href="#🔧-Goal" class="headerlink" title="🔧 Goal"></a>🔧 Goal</h2><p>Update the following line in <code>readme.txt</code> inside <code>tags/4.1</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tested up to: 6.8</span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-Prerequisites"><a href="#🛠️-Prerequisites" class="headerlink" title="🛠️ Prerequisites"></a>🛠️ Prerequisites</h2><p>Make sure SVN (Subversion) is installed on your system. I’m using Ubuntu, so I installed it with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install subversion</span><br></pre></td></tr></table></figure><hr><h2 id="📥-Step-1-Checkout-the-Plugin"><a href="#📥-Step-1-Checkout-the-Plugin" class="headerlink" title="📥 Step 1: Checkout the Plugin"></a>📥 Step 1: Checkout the Plugin</h2><p>Replace <code>your-plugin-slug</code> with your actual plugin slug. For me, it’s <code>woocommerce-filter-orders-by-product</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn checkout https://plugins.svn.wordpress.org/woocommerce-filter-orders-by-product</span><br><span class="line"><span class="built_in">cd</span> woocommerce-filter-orders-by-product</span><br></pre></td></tr></table></figure><p>This downloads the full plugin structure, including:</p><ul><li><code>/trunk</code></li><li><code>/tags/4.1</code></li><li><code>/branches</code></li></ul><hr><h2 id="📂-Step-2-Navigate-to-the-Tag-Directory"><a href="#📂-Step-2-Navigate-to-the-Tag-Directory" class="headerlink" title="📂 Step 2: Navigate to the Tag Directory"></a>📂 Step 2: Navigate to the Tag Directory</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tags/4.1</span><br></pre></td></tr></table></figure><hr><h2 id="📝-Step-3-Edit-the-File"><a href="#📝-Step-3-Edit-the-File" class="headerlink" title="📝 Step 3: Edit the File"></a>📝 Step 3: Edit the File</h2><p>I opened <code>readme.txt</code> using nano, but you can use any editor:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano readme.txt</span><br></pre></td></tr></table></figure><p>Then I updated the line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tested up to: 6.8</span><br></pre></td></tr></table></figure><p>Saved the file and exited the editor.</p><hr><h2 id="✅-Step-4-Commit-the-Change"><a href="#✅-Step-4-Commit-the-Change" class="headerlink" title="✅ Step 4: Commit the Change"></a>✅ Step 4: Commit the Change</h2><p>To commit only the <code>readme.txt</code> file and include my WordPress.org SVN username (but <strong>not</strong> the password), I ran:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn commit -m <span class="string">&quot;Updating supported WP version to 6.8&quot;</span> --username=kowsar89 readme.txt</span><br></pre></td></tr></table></figure><p>SVN then prompted me for my password securely in the terminal.</p><hr><h2 id="🕒-Step-5-Wait-a-Few-Minutes"><a href="#🕒-Step-5-Wait-a-Few-Minutes" class="headerlink" title="🕒 Step 5: Wait a Few Minutes"></a>🕒 Step 5: Wait a Few Minutes</h2><p>After a few minutes, the change was reflected in the plugin’s readme file on the WordPress.org plugin page under version 4.1.</p><hr><h2 id="✅-Bonus-Check-Your-Changes-Before-Committing"><a href="#✅-Bonus-Check-Your-Changes-Before-Committing" class="headerlink" title="✅ Bonus: Check Your Changes Before Committing"></a>✅ Bonus: Check Your Changes Before Committing</h2><p>Optional but helpful:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn diff readme.txt       <span class="comment"># See what&#x27;s changed</span></span><br><span class="line">svn status                <span class="comment"># See what files are modified</span></span><br></pre></td></tr></table></figure><hr><h2 id="🧠-Final-Thoughts"><a href="#🧠-Final-Thoughts" class="headerlink" title="🧠 Final Thoughts"></a>🧠 Final Thoughts</h2><p>This was a good reminder that SVN is different from Git — you commit from within specific directories, and you commit files explicitly.</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slack&#39;s blue dot notifiation icon was distracting me — so I patched it (Linux Fix)</title>
      <link href="/just-my-notes/slack-blue-dot-notification-linux/"/>
      <url>/just-my-notes/slack-blue-dot-notification-linux/</url>
      
        <content type="html"><![CDATA[<p>If you’re using the Slack desktop application on Linux, you might have noticed the persistent blue circle icon that appears on the taskbar whenever there’s activity in any channel. While this feature is designed to keep you informed, it can sometimes be more distracting than helpful, especially if you’re part of multiple active channels. In this guide, we’ll walk you through a method to disable this blue circle notification by modifying Slack’s internal files.</p><p><strong>Important Note:</strong> The steps outlined below involve altering Slack’s internal files. Proceed with caution and ensure you have the necessary backups before making any changes. Additionally, these modifications may need to be reapplied after Slack updates.</p><h3 id="Install-the-asar-Utility"><a href="#Install-the-asar-Utility" class="headerlink" title="Install the asar Utility"></a>Install the <code>asar</code> Utility</h3><p>   Slack’s resources are packaged using the Electron framework’s <code>asar</code> archive format. To modify these resources, you’ll need the <code>asar</code> utility. Install it globally using npm:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> npm install -g asar</span><br></pre></td></tr></table></figure><h3 id="Create-Backup-Directories"><a href="#Create-Backup-Directories" class="headerlink" title="Create Backup Directories"></a>Create Backup Directories</h3><p>   It’s crucial to back up the original Slack files before making any changes. Create a backup directory:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p ~/tmp/slack-backup</span><br></pre></td></tr></table></figure><h3 id="Backup-Original-Slack-Files"><a href="#Backup-Original-Slack-Files" class="headerlink" title="Backup Original Slack Files"></a>Backup Original Slack Files</h3><p>   Copy the original <code>app.asar</code> file and its unpacked contents to the backup directory:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /usr/lib/slack/resources/app.asar ~/tmp/slack-backup/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/lib/slack/resources/app.asar.unpacked ~/tmp/slack-backup/</span><br></pre></td></tr></table></figure><h3 id="Extract-the-app-asar-Archive"><a href="#Extract-the-app-asar-Archive" class="headerlink" title="Extract the app.asar Archive"></a>Extract the <code>app.asar</code> Archive</h3><p>   Create a temporary directory and extract the contents of <code>app.asar</code> into it:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> ~/tmp/slack</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">env</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>&quot;</span> asar extract /usr/lib/slack/resources/app.asar ~/tmp/slack</span><br></pre></td></tr></table></figure><h3 id="Modify-the-Notification-Settings"><a href="#Modify-the-Notification-Settings" class="headerlink" title="Modify the Notification Settings"></a>Modify the Notification Settings</h3><p>   Navigate to the extracted files and modify the JavaScript responsible for the taskbar notifications:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/:t&gt;0/:t&lt;0/g&#x27;</span> ~/tmp/slack/dist/main.*.js</span><br></pre></td></tr></table></figure><p>   This command changes the condition that controls the display of the blue circle, effectively disabling it.</p><h3 id="Repack-the-Modified-Files"><a href="#Repack-the-Modified-Files" class="headerlink" title="Repack the Modified Files"></a>Repack the Modified Files</h3><p>   After making the necessary changes, remove the original <code>app.asar</code> and its unpacked directory:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/lib/slack/resources/app.asar</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /usr/lib/slack/resources/app.asar.unpacked</span><br></pre></td></tr></table></figure><p>   Then, repack the modified files into a new <code>app.asar</code> archive and move it to Slack’s resources directory:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">env</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>&quot;</span> asar pack ~/tmp/slack /usr/lib/slack/resources/app.asar</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> ~/tmp/slack /usr/lib/slack/resources/app.asar.unpacked</span><br></pre></td></tr></table></figure><h3 id="Restart-Slack"><a href="#Restart-Slack" class="headerlink" title="Restart Slack"></a>Restart Slack</h3><p>   Close and reopen the Slack application for the changes to take effect. The blue circle icon should no longer appear on channel activity.</p><hr><p><strong>Additional Considerations:</strong></p><ul><li><strong>Slack Updates:</strong> Be aware that updating Slack may overwrite these changes. You might need to repeat this process after each update.</li></ul><p>By following these steps, you can customize your Slack experience on Linux to better suit your workflow and minimize distractions.</p><hr><p><strong>🛠️ (Optional) Note on Using <code>PATH=$PATH</code> with <code>asar</code></strong></p><p>If you’re wondering why I used <code>sudo env &quot;PATH=$PATH&quot; asar ...</code> instead of just <code>sudo asar ...</code>, here’s the reason:</p><p>Even though I had installed <code>asar</code> globally using <code>npm</code>, running it with <code>sudo</code> gave me this error:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> asar ...</span><br><span class="line"><span class="comment"># → sudo: asar: command not found</span></span><br></pre></td></tr></table></figure><p>But oddly enough, running <code>asar</code> without <code>sudo</code> worked just fine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asar --version</span><br><span class="line"><span class="comment"># → v3.2.0</span></span><br></pre></td></tr></table></figure><p>This happens because tools like <code>asar</code> are often installed under a user-specific path when using Node.js via <strong>NVM (Node Version Manager)</strong>. That path isn’t inherited by <code>sudo</code>, which uses a more limited environment.</p><p>To fix it, I simply told <code>sudo</code> to explicitly pass along my current <code>PATH</code> like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">env</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>&quot;</span> asar ...</span><br></pre></td></tr></table></figure><p>That way, <code>asar</code> is found and executed correctly — with root permissions — without needing to fiddle with symlinks or system-wide installs.</p><p>🧠 <strong>TL;DR</strong>: If <code>asar</code> works but <code>sudo asar</code> doesn’t, use:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">env</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>&quot;</span> asar ...</span><br></pre></td></tr></table></figure><p>Problem solved. ✔️</p><p><strong>Ref</strong>: <a href="https://superuser.com/questions/1211975/slack-app-on-linux-how-to-disable-the-blue-circle-icon-on-channel-activity" title="Slack app on Linux: How to disable the &quot;blue circle&quot; icon on channel ...">superuser</a></p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Productivity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Downgrade a .deb Package on Ubuntu</title>
      <link href="/just-my-notes/downgrading-deb-package-on-ubuntu/"/>
      <url>/just-my-notes/downgrading-deb-package-on-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>Sometimes a newer version of an app doesn’t work as expected — maybe it’s buggy, has UI issues, or just doesn’t suit your workflow. This can be frustrating, especially when there’s no built-in way to roll back to a previous version. Fortunately, on Ubuntu (or any Debian-based Linux distribution), you <em>can</em> downgrade <code>.deb</code> packages manually.</p><p>In this post, I’ll show you how to downgrade an already-installed <code>.deb</code> package using <code>dpkg</code>, and explain why tools like <code>gdebi</code> might not work in this case. We’ll use <strong>Local by Flywheel</strong> as a practical example.</p><h2 id="Why-Downgrade"><a href="#Why-Downgrade" class="headerlink" title="Why Downgrade?"></a>Why Downgrade?</h2><p>Let’s say you updated <strong>Local by Flywheel</strong> to version <code>9.2.4</code>, but after the update, you noticed UI issues — for instance, <strong>blurry sidebar text</strong>. Since the issue didn’t exist in version <code>9.2.2</code>, you want to go back.</p><p>Trying to install the older <code>.deb</code> package with <code>gdebi</code> might give you this error:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This package is uninstallable</span><br><span class="line">A later version is already installed</span><br></pre></td></tr></table></figure><p>That’s because <code>gdebi</code> doesn’t support forcefully downgrading packages. But don’t worry — there’s a workaround using <code>dpkg</code>.</p><h2 id="How-to-Downgrade-Using-dpkg"><a href="#How-to-Downgrade-Using-dpkg" class="headerlink" title="How to Downgrade Using dpkg"></a>How to Downgrade Using <code>dpkg</code></h2><p>Here’s how you can force the installation of an older <code>.deb</code> package even if a newer version is installed:</p><ol><li><p>Open your terminal.</p></li><li><p>Navigate to the directory where your <code>.deb</code> file is located:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads</span><br></pre></td></tr></table></figure></li><li><p>Run the following command to downgrade (replacing the filename if necessary):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg -i --force-downgrade local-9.2.2-linux.deb</span><br></pre></td></tr></table></figure></li></ol><p>That’s it! This command tells <code>dpkg</code> to install the <code>.deb</code> package and <em>force</em> the downgrade, bypassing version checks.</p><h2 id="After-Downgrade-Fix-Dependencies"><a href="#After-Downgrade-Fix-Dependencies" class="headerlink" title="After Downgrade: Fix Dependencies"></a>After Downgrade: Fix Dependencies</h2><p>If the downgrade causes dependency issues, fix them using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -f</span><br></pre></td></tr></table></figure><p>This ensures that your system resolves any broken packages after the downgrade.</p><h2 id="A-Word-of-Caution"><a href="#A-Word-of-Caution" class="headerlink" title="A Word of Caution"></a>A Word of Caution</h2><p>Downgrading packages can be risky if:</p><ul><li>The app depends on system-wide libraries that changed in the newer version.</li><li>Other apps rely on the newer version.</li></ul><p>Always check for potential side effects and consider backing up your data before proceeding.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>While Ubuntu doesn’t provide a built-in tool to downgrade <code>.deb</code> packages easily, <code>dpkg</code> gives you full control — if you know how to use it. In cases like Local by Flywheel, going back to an earlier version can solve unexpected problems introduced in newer updates.</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
