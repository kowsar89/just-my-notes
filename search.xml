<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How I fixed blurry text in an Electron app (Local by Flywheel) on Linux</title>
      <link href="/just-my-notes/blurry-text-electron-app-linux-fix-local/"/>
      <url>/just-my-notes/blurry-text-electron-app-linux-fix-local/</url>
      
        <content type="html"><![CDATA[<p>Recently, I encountered a minor but annoying issue with <strong>Local (by Flywheel)</strong> on my Ubuntu machine. After an update, the text inside the app‚Äîespecially in the sidebar‚Äîstarted to look fuzzy and low-quality. I discovered it was related to a Chromium flag called <code>FontationsFontBackend</code>, which could be disabled to fix the rendering.</p><p>Sure, I could launch it from the terminal using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/Local/local --disable-features=FontationsFontBackend</span><br></pre></td></tr></table></figure><p>But I didn‚Äôt want to open the terminal every time I needed to launch the app. Instead, I wanted to patch the desktop shortcut itself so the flag gets applied automatically, <strong>without touching the terminal again</strong>. Here‚Äôs how I did it, and this works not just for Local but any Linux app with a <code>.desktop</code> file.</p><h2 id="üõ†Ô∏è-Step-1-Locate-the-desktop-file"><a href="#üõ†Ô∏è-Step-1-Locate-the-desktop-file" class="headerlink" title="üõ†Ô∏è Step-1: Locate the .desktop file"></a>üõ†Ô∏è Step-1: Locate the <code>.desktop</code> file</h2><p>Most desktop apps on Linux use <code>.desktop</code> launcher files, and they can usually be found in one of these locations:</p><ul><li><code>/usr/share/applications/</code> (for system-wide apps)</li><li><code>~/.local/share/applications/</code> (for per-user custom launchers)</li></ul><p>In my case, Local had an entry in:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/usr/share/applications/local.desktop</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>You <strong>can directly edit</strong> this file with root permissions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /usr/share/applications/local.desktop</span><br></pre></td></tr></table></figure><p>However, a better approach is to copy it to your local applications folder first:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> /usr/share/applications/local.desktop ~/.local/share/applications/</span><br></pre></td></tr></table></figure><p>Then edit the copy instead:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.local/share/applications/local.desktop</span><br></pre></td></tr></table></figure><p>This way, the change is limited to your user and won‚Äôt be lost during a system update or overwritten by package upgrades. It‚Äôs cleaner and safer in the long run.</p><h2 id="üîß-Step-2-Modify-the-Exec-line-to-add-launch-flags"><a href="#üîß-Step-2-Modify-the-Exec-line-to-add-launch-flags" class="headerlink" title="üîß Step-2: Modify the Exec line to add launch flags"></a>üîß Step-2: Modify the <code>Exec</code> line to add launch flags</h2><p>Open the <code>.desktop</code> file using your favorite text editor:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.local/share/applications/local.desktop</span><br></pre></td></tr></table></figure><p>Find the line that starts with <code>Exec=</code> and update it like this:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Exec</span>=/opt/Local/local --disable-features=FontationsFontBackend %U</span><br></pre></td></tr></table></figure><p>You can replace <code>/opt/Local/local</code> with the actual path to your app‚Äôs binary. The <code>--disable-features=...</code> part is the flag you‚Äôre injecting, and <code>%U</code> at the end handles file or URL arguments passed by the desktop environment.</p><p>Once you‚Äôre done editing, save and close the file.</p><h2 id="‚úÖ-Step-3-Restart-your-desktop-shell-no-reboot-needed"><a href="#‚úÖ-Step-3-Restart-your-desktop-shell-no-reboot-needed" class="headerlink" title="‚úÖ Step-3: Restart your desktop shell (no reboot needed)"></a>‚úÖ Step-3: Restart your desktop shell (no reboot needed)</h2><p>Instead of rebooting, you can simply restart your desktop shell to make the updated shortcut take effect. On GNOME, the easiest way is:</p><ul><li>Press <code>Alt + F2</code></li><li>Type <code>r</code></li><li>Hit <code>Enter</code></li></ul><p>Alternatively, just log out and log back in.</p><h2 id="üìù-Final-Result"><a href="#üìù-Final-Result" class="headerlink" title="üìù Final Result"></a>üìù Final Result</h2><p>After applying this, launching Local from the system menu now starts it with the custom flag. The blurry text issue is gone, and I don‚Äôt need to run it from the terminal anymore.</p><p>This approach is generic and works for any app that accepts command-line flags ‚Äî whether you want to disable experimental features, enable GPU acceleration, or set up debugging options. Just edit the appropriate <code>.desktop</code> file and you‚Äôre good to go.</p><h2 id="üéâ-Conclusion"><a href="#üéâ-Conclusion" class="headerlink" title="üéâ Conclusion"></a>üéâ Conclusion</h2><p>This was a small tweak, but it saved me time and hassle in the long run. If you‚Äôre ever in a situation where an app needs special launch flags but you‚Äôre tired of opening a terminal each time, just patch the <code>.desktop</code> launcher ‚Äî it‚Äôs a quick and effective fix.</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How I Use AI to Assist My Code Review Process</title>
      <link href="/just-my-notes/using-ai-for-code-review/"/>
      <url>/just-my-notes/using-ai-for-code-review/</url>
      
        <content type="html"><![CDATA[<p>As someone who spends most of their time reviewing code, I‚Äôve been integrating AI into my code review workflow ever since ChatGPT became publicly available. Over time, as new AI tools and models emerged, my approach evolved. AI is changing rapidly, so this post is just a snapshot of how I use it <strong>today ‚Äî May 29, 2025</strong>. It might become outdated pretty quickly, but here‚Äôs how I currently use AI to support my code review work.</p><h2 id="üß†-Why-I-Use-AI-in-Code-Reviews"><a href="#üß†-Why-I-Use-AI-in-Code-Reviews" class="headerlink" title="üß† Why I Use AI in Code Reviews"></a>üß† Why I Use AI in Code Reviews</h2><p>AI is not a replacement for a human reviewer. It‚Äôs a tool ‚Äî one that helps me think better, catch more edge cases, and question assumptions. It often highlights potential issues that are easy to miss with the human eye, especially when reviewing large or repetitive changes. That said, it also introduces noise: false positives, overly strict suggestions, and occasional nonsense. So it‚Äôs essential to treat AI suggestions as advisory, not authoritative.</p><h2 id="üõ†Ô∏è-Step-1-Getting-the-Diff-View-of-a-Merge-Request"><a href="#üõ†Ô∏è-Step-1-Getting-the-Diff-View-of-a-Merge-Request" class="headerlink" title="üõ†Ô∏è Step-1: Getting the Diff View of a Merge Request"></a>üõ†Ô∏è Step-1: Getting the Diff View of a Merge Request</h2><p>When a GitLab Merge Request (MR) is assigned to me, I go straight to the raw diff view. This gives me a cleaner view of what changed. The trick is simple: just add <code>.diff</code> to the end of the MR URL.</p><p>For example, if the original MR URL is: <a href="https://gitlab.com/kowsar89/project-name/-/merge_requests/1200">https://gitlab.com/kowsar89/project-name/-/merge_requests/1200</a></p><p>Then the <code>.diff</code> URL becomes: <a href="https://gitlab.com/kowsar89/project-name/-/merge_requests/1200.diff">https://gitlab.com/kowsar89/project-name/-/merge_requests/1200.diff</a></p><p>I open that in my browser and copy the entire diff text.</p><p><strong>üí° Note:</strong> This same <code>.diff</code> trick works for GitHub Pull Requests (PR) too ‚Äî just add <code>.diff</code> at the end of the PR URL.</p><h2 id="üìù-Step-2-Feed-the-Diff-into-ChatGPT"><a href="#üìù-Step-2-Feed-the-Diff-into-ChatGPT" class="headerlink" title="üìù Step-2: Feed the Diff into ChatGPT"></a>üìù Step-2: Feed the Diff into ChatGPT</h2><p>Once I have the diff, I paste it into ChatGPT along with a specific prompt. Here‚Äôs what the full prompt usually looks like:</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/woocommerce-filter-orders-by-product.php b/woocommerce-filter-orders-by-product.php</span><br><span class="line">index 8ad0e2f..fc22c06 100644</span><br><span class="line">--- a/woocommerce-filter-orders-by-product.php</span><br><span class="line">+++ b/woocommerce-filter-orders-by-product.php</span><br><span class="line"> </span><br><span class="line">-FOA_Woo_Filter_Orders_by_Product::instance();</span><br><span class="line">\ No newline at end of file</span><br><span class="line">+FOA_Woo_Filter_Orders_by_Product::instance();</span><br></pre></td></tr></table></figure><p>&#x2F;‚Äî‚Äì<br>Analyze the provided diff content of the code changes and see if you find any problem. I‚Äôm only interested in any new issue occurred due to code changes only, nothing else. Note that, strict_types&#x3D;1 is not declared anywhere. And code should be compatible with PHP 7.2+ and WordPress 4.9+</p></blockquote><p>This helps me quickly get a second opinion from the AI on whether any potential issues have been introduced.</p><h2 id="üß†-Step-3-Use-the-Right-GPT-for-the-Job"><a href="#üß†-Step-3-Use-the-Right-GPT-for-the-Job" class="headerlink" title="üß† Step-3: Use the Right GPT for the Job"></a>üß† Step-3: Use the Right GPT for the Job</h2><p>For code reviews, I use a custom GPT named <strong>WordPress Wizard</strong>, which is available in the ChatGPT Plus subscription. To access it:</p><ol><li>Go to the ChatGPT sidebar.</li><li>Click on ‚ÄòGPTs‚Äô.</li><li>Search for <strong>WordPress Wizard</strong>.</li><li>Open it and start a chat ‚Äî it will then be pinned to your sidebar for easy reuse.</li></ol><p>This GPT is fine-tuned to understand WordPress and PHP context, so it often provides much more relevant insights than the default GPT-4o model.</p><h2 id="‚ö†Ô∏è-Important-Notes-Cautions"><a href="#‚ö†Ô∏è-Important-Notes-Cautions" class="headerlink" title="‚ö†Ô∏è Important Notes &amp; Cautions"></a>‚ö†Ô∏è Important Notes &amp; Cautions</h2><ul><li>This AI workflow is only for <strong>code review</strong>, not development. I have a separate setup for writing or debugging code.</li><li>AI helps me think, but I never blindly trust its output. It can produce false positives ‚Äî sometimes sounding very confident while being completely wrong. So I treat every suggestion with a critical eye.</li><li>It sometimes slows down the review process, but the trade-off is worth it because I catch more edge cases and subtle bugs.</li></ul><h2 id="‚úÖ-Final-Thoughts"><a href="#‚úÖ-Final-Thoughts" class="headerlink" title="‚úÖ Final Thoughts"></a>‚úÖ Final Thoughts</h2><p>Integrating AI into my code review workflow has significantly improved the quality of my reviews. While it doesn‚Äôt replace my judgment, it complements it ‚Äî especially when it comes to catching tricky or edge-case issues. As with any tool, the key is knowing how and when to use it. For now, this setup works well ‚Äî and I‚Äôll continue evolving it as the AI landscape changes.</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How I modified my plugin&#39;s readme.txt on the WordPress repo using SVN (Linux)</title>
      <link href="/just-my-notes/modifiy-plugin-readme-txt-on-wordpress-repo-using-svn/"/>
      <url>/just-my-notes/modifiy-plugin-readme-txt-on-wordpress-repo-using-svn/</url>
      
        <content type="html"><![CDATA[<p>I recently needed to update the <code>readme.txt</code> file inside a specific tag (<code>tags/4.1</code>) of my WordPress plugin hosted on WordPress.org.</p><hr><h2 id="üîß-Goal"><a href="#üîß-Goal" class="headerlink" title="üîß Goal"></a>üîß Goal</h2><p>Update the following line in <code>readme.txt</code> inside <code>tags/4.1</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tested up to: 6.8</span><br></pre></td></tr></table></figure><hr><h2 id="üõ†Ô∏è-Prerequisites"><a href="#üõ†Ô∏è-Prerequisites" class="headerlink" title="üõ†Ô∏è Prerequisites"></a>üõ†Ô∏è Prerequisites</h2><p>Make sure SVN (Subversion) is installed on your system. I‚Äôm using Ubuntu, so I installed it with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install subversion</span><br></pre></td></tr></table></figure><hr><h2 id="üì•-Step-1-Checkout-the-Plugin"><a href="#üì•-Step-1-Checkout-the-Plugin" class="headerlink" title="üì• Step 1: Checkout the Plugin"></a>üì• Step 1: Checkout the Plugin</h2><p>Replace <code>your-plugin-slug</code> with your actual plugin slug. For me, it‚Äôs <code>woocommerce-filter-orders-by-product</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn checkout https://plugins.svn.wordpress.org/woocommerce-filter-orders-by-product</span><br><span class="line"><span class="built_in">cd</span> woocommerce-filter-orders-by-product</span><br></pre></td></tr></table></figure><p>This downloads the full plugin structure, including:</p><ul><li><code>/trunk</code></li><li><code>/tags/4.1</code></li><li><code>/branches</code></li></ul><hr><h2 id="üìÇ-Step-2-Navigate-to-the-Tag-Directory"><a href="#üìÇ-Step-2-Navigate-to-the-Tag-Directory" class="headerlink" title="üìÇ Step 2: Navigate to the Tag Directory"></a>üìÇ Step 2: Navigate to the Tag Directory</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tags/4.1</span><br></pre></td></tr></table></figure><hr><h2 id="üìù-Step-3-Edit-the-File"><a href="#üìù-Step-3-Edit-the-File" class="headerlink" title="üìù Step 3: Edit the File"></a>üìù Step 3: Edit the File</h2><p>I opened <code>readme.txt</code> using nano, but you can use any editor:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano readme.txt</span><br></pre></td></tr></table></figure><p>Then I updated the line:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tested up to: 6.8</span><br></pre></td></tr></table></figure><p>Saved the file and exited the editor.</p><hr><h2 id="‚úÖ-Step-4-Commit-the-Change"><a href="#‚úÖ-Step-4-Commit-the-Change" class="headerlink" title="‚úÖ Step 4: Commit the Change"></a>‚úÖ Step 4: Commit the Change</h2><p>To commit only the <code>readme.txt</code> file and include my WordPress.org SVN username (but <strong>not</strong> the password), I ran:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn commit -m <span class="string">&quot;Updating supported WP version to 6.8&quot;</span> --username=kowsar89 readme.txt</span><br></pre></td></tr></table></figure><p>SVN then prompted me for my password securely in the terminal.</p><hr><h2 id="üïí-Step-5-Wait-a-Few-Minutes"><a href="#üïí-Step-5-Wait-a-Few-Minutes" class="headerlink" title="üïí Step 5: Wait a Few Minutes"></a>üïí Step 5: Wait a Few Minutes</h2><p>After a few minutes, the change was reflected in the plugin‚Äôs readme file on the WordPress.org plugin page under version 4.1.</p><hr><h2 id="‚úÖ-Bonus-Check-Your-Changes-Before-Committing"><a href="#‚úÖ-Bonus-Check-Your-Changes-Before-Committing" class="headerlink" title="‚úÖ Bonus: Check Your Changes Before Committing"></a>‚úÖ Bonus: Check Your Changes Before Committing</h2><p>Optional but helpful:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn diff readme.txt       <span class="comment"># See what&#x27;s changed</span></span><br><span class="line">svn status                <span class="comment"># See what files are modified</span></span><br></pre></td></tr></table></figure><hr><h2 id="üß†-Final-Thoughts"><a href="#üß†-Final-Thoughts" class="headerlink" title="üß† Final Thoughts"></a>üß† Final Thoughts</h2><p>This was a good reminder that SVN is different from Git ‚Äî you commit from within specific directories, and you commit files explicitly.</p>]]></content>
      
      
      <categories>
          
          <category> Development </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slack&#39;s blue dot notification icon was distracting me ‚Äî so I patched it (Linux Fix)</title>
      <link href="/just-my-notes/slack-blue-dot-notification-linux/"/>
      <url>/just-my-notes/slack-blue-dot-notification-linux/</url>
      
        <content type="html"><![CDATA[<p>If you‚Äôre using the Slack desktop application on Linux, you might have noticed the persistent blue circle icon that appears on the taskbar whenever there‚Äôs activity in any channel. While this feature is designed to keep you informed, it can sometimes be more distracting than helpful, especially if you‚Äôre part of multiple active channels. In this guide, we‚Äôll walk you through a method to disable this blue circle notification by modifying Slack‚Äôs internal files.</p><p><strong>Important Note:</strong> The steps outlined below involve altering Slack‚Äôs internal files. Proceed with caution and ensure you have the necessary backups before making any changes. Additionally, these modifications may need to be reapplied after Slack updates.</p><h3 id="Install-the-asar-Utility"><a href="#Install-the-asar-Utility" class="headerlink" title="Install the asar Utility"></a>Install the <code>asar</code> Utility</h3><p>   Slack‚Äôs resources are packaged using the Electron framework‚Äôs <code>asar</code> archive format. To modify these resources, you‚Äôll need the <code>asar</code> utility. Install it globally using npm:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> npm install -g asar</span><br></pre></td></tr></table></figure><h3 id="Create-Backup-Directories"><a href="#Create-Backup-Directories" class="headerlink" title="Create Backup Directories"></a>Create Backup Directories</h3><p>   It‚Äôs crucial to back up the original Slack files before making any changes. Create a backup directory:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p ~/tmp/slack-backup</span><br></pre></td></tr></table></figure><h3 id="Backup-Original-Slack-Files"><a href="#Backup-Original-Slack-Files" class="headerlink" title="Backup Original Slack Files"></a>Backup Original Slack Files</h3><p>   Copy the original <code>app.asar</code> file and its unpacked contents to the backup directory:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /usr/lib/slack/resources/app.asar ~/tmp/slack-backup/</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/lib/slack/resources/app.asar.unpacked ~/tmp/slack-backup/</span><br></pre></td></tr></table></figure><h3 id="Extract-the-app-asar-Archive"><a href="#Extract-the-app-asar-Archive" class="headerlink" title="Extract the app.asar Archive"></a>Extract the <code>app.asar</code> Archive</h3><p>   Create a temporary directory and extract the contents of <code>app.asar</code> into it:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> ~/tmp/slack</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">env</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>&quot;</span> asar extract /usr/lib/slack/resources/app.asar ~/tmp/slack</span><br></pre></td></tr></table></figure><h3 id="Modify-the-Notification-Settings"><a href="#Modify-the-Notification-Settings" class="headerlink" title="Modify the Notification Settings"></a>Modify the Notification Settings</h3><p>   Navigate to the extracted files and modify the JavaScript responsible for the taskbar notifications:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;s/:t&gt;0/:t&lt;0/g&#x27;</span> ~/tmp/slack/dist/main.*.js</span><br></pre></td></tr></table></figure><p>   This command changes the condition that controls the display of the blue circle, effectively disabling it.</p><h3 id="Repack-the-Modified-Files"><a href="#Repack-the-Modified-Files" class="headerlink" title="Repack the Modified Files"></a>Repack the Modified Files</h3><p>   After making the necessary changes, remove the original <code>app.asar</code> and its unpacked directory:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/lib/slack/resources/app.asar</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /usr/lib/slack/resources/app.asar.unpacked</span><br></pre></td></tr></table></figure><p>   Then, repack the modified files into a new <code>app.asar</code> archive and move it to Slack‚Äôs resources directory:</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">env</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>&quot;</span> asar pack ~/tmp/slack /usr/lib/slack/resources/app.asar</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> ~/tmp/slack /usr/lib/slack/resources/app.asar.unpacked</span><br></pre></td></tr></table></figure><h3 id="Restart-Slack"><a href="#Restart-Slack" class="headerlink" title="Restart Slack"></a>Restart Slack</h3><p>   Close and reopen the Slack application for the changes to take effect. The blue circle icon should no longer appear on channel activity.</p><hr><p><strong>Additional Considerations:</strong></p><ul><li><strong>Slack Updates:</strong> Be aware that updating Slack may overwrite these changes. You might need to repeat this process after each update.</li></ul><p>By following these steps, you can customize your Slack experience on Linux to better suit your workflow and minimize distractions.</p><hr><p><strong>üõ†Ô∏è (Optional) Note on Using <code>PATH=$PATH</code> with <code>asar</code></strong></p><p>If you‚Äôre wondering why I used <code>sudo env &quot;PATH=$PATH&quot; asar ...</code> instead of just <code>sudo asar ...</code>, here‚Äôs the reason:</p><p>Even though I had installed <code>asar</code> globally using <code>npm</code>, running it with <code>sudo</code> gave me this error:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> asar ...</span><br><span class="line"><span class="comment"># ‚Üí sudo: asar: command not found</span></span><br></pre></td></tr></table></figure><p>But oddly enough, running <code>asar</code> without <code>sudo</code> worked just fine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">asar --version</span><br><span class="line"><span class="comment"># ‚Üí v3.2.0</span></span><br></pre></td></tr></table></figure><p>This happens because tools like <code>asar</code> are often installed under a user-specific path when using Node.js via <strong>NVM (Node Version Manager)</strong>. That path isn‚Äôt inherited by <code>sudo</code>, which uses a more limited environment.</p><p>To fix it, I simply told <code>sudo</code> to explicitly pass along my current <code>PATH</code> like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">env</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>&quot;</span> asar ...</span><br></pre></td></tr></table></figure><p>That way, <code>asar</code> is found and executed correctly ‚Äî with root permissions ‚Äî without needing to fiddle with symlinks or system-wide installs.</p><p>üß† <strong>TL;DR</strong>: If <code>asar</code> works but <code>sudo asar</code> doesn‚Äôt, use:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">env</span> <span class="string">&quot;PATH=<span class="variable">$PATH</span>&quot;</span> asar ...</span><br></pre></td></tr></table></figure><p>Problem solved. ‚úîÔ∏è</p><p><strong>Ref</strong>: <a href="https://superuser.com/questions/1211975/slack-app-on-linux-how-to-disable-the-blue-circle-icon-on-channel-activity" title="Slack app on Linux: How to disable the &quot;blue circle&quot; icon on channel ...">superuser</a></p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Productivity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Downgrade a .deb Package on Ubuntu</title>
      <link href="/just-my-notes/downgrading-deb-package-on-ubuntu/"/>
      <url>/just-my-notes/downgrading-deb-package-on-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>Sometimes a newer version of an app doesn‚Äôt work as expected ‚Äî maybe it‚Äôs buggy, has UI issues, or just doesn‚Äôt suit your workflow. This can be frustrating, especially when there‚Äôs no built-in way to roll back to a previous version. Fortunately, on Ubuntu (or any Debian-based Linux distribution), you <em>can</em> downgrade <code>.deb</code> packages manually.</p><p>In this post, I‚Äôll show you how to downgrade an already-installed <code>.deb</code> package using <code>dpkg</code>, and explain why tools like <code>gdebi</code> might not work in this case. We‚Äôll use <strong>Local by Flywheel</strong> as a practical example.</p><h2 id="Why-Downgrade"><a href="#Why-Downgrade" class="headerlink" title="Why Downgrade?"></a>Why Downgrade?</h2><p>Let‚Äôs say you updated <strong>Local by Flywheel</strong> to version <code>9.2.4</code>, but after the update, you noticed UI issues ‚Äî for instance, <strong>blurry sidebar text</strong>. Since the issue didn‚Äôt exist in version <code>9.2.2</code>, you want to go back.</p><p>Trying to install the older <code>.deb</code> package with <code>gdebi</code> might give you this error:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This package is uninstallable</span><br><span class="line">A later version is already installed</span><br></pre></td></tr></table></figure><p>That‚Äôs because <code>gdebi</code> doesn‚Äôt support forcefully downgrading packages. But don‚Äôt worry ‚Äî there‚Äôs a workaround using <code>dpkg</code>.</p><h2 id="How-to-Downgrade-Using-dpkg"><a href="#How-to-Downgrade-Using-dpkg" class="headerlink" title="How to Downgrade Using dpkg"></a>How to Downgrade Using <code>dpkg</code></h2><p>Here‚Äôs how you can force the installation of an older <code>.deb</code> package even if a newer version is installed:</p><ol><li><p>Open your terminal.</p></li><li><p>Navigate to the directory where your <code>.deb</code> file is located:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Downloads</span><br></pre></td></tr></table></figure></li><li><p>Run the following command to downgrade (replacing the filename if necessary):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg -i --force-downgrade local-9.2.2-linux.deb</span><br></pre></td></tr></table></figure></li></ol><p>That‚Äôs it! This command tells <code>dpkg</code> to install the <code>.deb</code> package and <em>force</em> the downgrade, bypassing version checks.</p><h2 id="After-Downgrade-Fix-Dependencies"><a href="#After-Downgrade-Fix-Dependencies" class="headerlink" title="After Downgrade: Fix Dependencies"></a>After Downgrade: Fix Dependencies</h2><p>If the downgrade causes dependency issues, fix them using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install -f</span><br></pre></td></tr></table></figure><p>This ensures that your system resolves any broken packages after the downgrade.</p><h2 id="A-Word-of-Caution"><a href="#A-Word-of-Caution" class="headerlink" title="A Word of Caution"></a>A Word of Caution</h2><p>Downgrading packages can be risky if:</p><ul><li>The app depends on system-wide libraries that changed in the newer version.</li><li>Other apps rely on the newer version.</li></ul><p>Always check for potential side effects and consider backing up your data before proceeding.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>While Ubuntu doesn‚Äôt provide a built-in tool to downgrade <code>.deb</code> packages easily, <code>dpkg</code> gives you full control ‚Äî if you know how to use it. In cases like Local by Flywheel, going back to an earlier version can solve unexpected problems introduced in newer updates.</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
